---
apiVersion: v1
kind: Service
metadata:
  name: &app pgrwl
  namespace: pgrwl-test
  labels:
    app: *app
spec:
  type: NodePort
  ports:
    - port: 5080
      targetPort: 5080
      # dev/tst/preprod/master
      nodePort: 30266
      name: http
  selector:
    app: *app

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: &app pgrwl
  namespace: pgrwl-test
  labels:
    app: *app
data:
  TZ: "Asia/Aqtau"
  PGHOST: "postgres"
  PGPORT: "5432"
  PGUSER: "postgres"
  PGPASSWORD: "postgres"
  PGRWL_DIRECTORY: "/wals/wal-archive"
  PGRWL_RECEIVE_SLOT: "pg_recwal_5"
  PGRWL_LOG_LEVEL: "info"
  PGRWL_LOG_FORMAT: "json"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgrwl-data
  namespace: pgrwl-test
spec:
  # NOTE: replace with pvc you're using in your infra.
  storageClassName: standard
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &app pgrwl
  namespace: pgrwl-test
spec:
  replicas: 1
  serviceName: *app
  selector:
    matchLabels:
      app: *app
  template:
    metadata:
      labels:
        app: *app
    spec:
      # NOTE: replace with pvc you're using in your infra.
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: pgrwl-data
            readOnly: false

      # Wait logic is handled by the service itself.
      #
      # initContainers:
      #   - name: wait-db
      #     image: "busybox:latest"
      #     imagePullPolicy: IfNotPresent
      #     command:
      #       - /bin/sh
      #       - -euc
      #       - |
      #         while ! nc -z postgres 5432; do
      #           echo "Waiting for PostgreSQL to boot";
      #           sleep 5;
      #         done;
      #         echo "PostgreSQL is ready";

      containers:
        - name: *app
          image: "mailboxsq7/pgrwl:latest"
          imagePullPolicy: Always
          args: ["receive"]
          ports:
            - containerPort: 5080
              name: http
          envFrom:
            - configMapRef:
                name: *app
          resources:
            requests:
              memory: "128Mi"
              cpu: "32m"
            limits:
              memory: "1Gi"
              cpu: "1"
          volumeMounts:
            - mountPath: /wals
              name: storage
