---
apiVersion: v1
kind: Service
metadata:
  name: &app pgrwl-backup
  namespace: pgrwl-test
  labels:
    app: *app
spec:
  type: NodePort
  ports:
    - port: 7070
      targetPort: 7070
      nodePort: 30271
      name: http
  selector:
    app: *app

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: &app pgrwl-backup
  namespace: pgrwl-test
  labels:
    app: *app
data:
  TZ: "Asia/Aqtau"
  PGHOST: "postgres"
  PGPORT: "5432"
  PGUSER: "postgres"
  PGPASSWORD: "postgres"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgrwl-backup-config
  namespace: pgrwl-test
data:
  ###### s3-setup #######
  config-s3.yml: |
    main:
      listen_port: 7070
      directory: "/wals/wal-archive"
    backup:
      cron: "* * * * *"
      retention:
        enable: true
        type: time
        value: "5m"
    log:
      level: trace
      format: text
      add_source: true
    metrics:
      enable: true
    storage:
      name: s3
      compression:
        algo: gzip
      encryption:
        algo: aes-256-gcm
        pass: qwerty123
      s3:
        url: https://minio:9000
        access_key_id: minioadmin
        secret_access_key: minioadmin123
        bucket: backups
        region: main
        use_path_style: true
        disable_ssl: true

  ####### localfs-setup #######
  config-localfs.yml: |
    main:
      listen_port: 7070
      directory: "/wals/wal-archive"
    backup:
      cron: "* * * * *"
      retention:
        enable: true
        type: time
        value: "5m"
    log:
      level: trace
      format: text
      add_source: true
    metrics:
      enable: true
    storage:
      name: local
      compression:
        algo: gzip
      encryption:
        algo: aes-256-gcm
        pass: qwerty123

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgrwl-backup-data
  namespace: pgrwl-test
spec:
  storageClassName: standard
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &app pgrwl-backup
  namespace: pgrwl-test
spec:
  replicas: 1
  serviceName: *app
  selector:
    matchLabels:
      app: *app
  template:
    metadata:
      labels:
        app: *app
    spec:
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: pgrwl-backup-data
            readOnly: false
        - name: pgrwl-backup-config
          configMap:
            name: pgrwl-backup-config

      initContainers:
        - name: wait-db
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -euc
            - |
              while ! nc -z postgres 5432; do
                echo "Waiting for PostgreSQL to boot";
                sleep 5;
              done;
              echo "PostgreSQL is ready";

      containers:
        - name: *app
          image: "localhost:5000/pgrwl:latest"
          imagePullPolicy: Always
          args: ["start"]
          env:
            - name: PGRWL_MODE
              value: "backup"
            # "/tmp/configs/config-s3.yml"
            # "/tmp/configs/config-localfs.yml"
            - name: PGRWL_CONFIG_PATH
              value: "/tmp/configs/config-s3.yml"
          ports:
            - containerPort: 7070
              name: http
          envFrom:
            - configMapRef:
                name: *app
          resources:
            requests:
              memory: "128Mi"
              cpu: "32m"
            limits:
              memory: "1Gi"
              cpu: "1"
          volumeMounts:
            - mountPath: /wals
              name: storage
            - mountPath: /tmp/configs
              name: pgrwl-backup-config
