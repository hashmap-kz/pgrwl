/////////////////////

package main

import (
	"context"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer cancel()

	for {
		StreamLog(ctx)

		select {
		case <-ctx.Done():
			slog.Info("received termination signal, exiting...")
			os.Exit(0)
		default:
		}

		if noLoop {
			slog.Error("disconnected")
			os.Exit(1)
		} else {
			slog.Info("disconnected; waiting 5 seconds to try again")
			time.Sleep(5 * time.Second)
		}
	}
}


/////////////////////
// Patch HandleCopyStream

select {
case <-ctx.Done():
    return ctx.Err()
default:
    ctxTimeout, cancel := context.WithTimeout(ctx, timeout)
    msg, err := conn.ReceiveMessage(ctxTimeout)
    cancel()
    if pgconn.Timeout(err) {
        continue
    }
    if err != nil {
        return fmt.Errorf("receive message failed: %w", err)
    }

    // your switch { case *pgproto3.CopyData, etc } here
}




