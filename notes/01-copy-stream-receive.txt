import (
	"context"
	"time"

	"github.com/jackc/pgproto3/v2"
	"github.com/jackc/pgconn"
)

// CopyStreamReceive tries to receive a CopyData message from the WAL stream.
// It waits at most `timeout` milliseconds.
func CopyStreamReceive(
	conn *pgconn.PgConn,
	timeout time.Duration,
) (data []byte, result int, err error) {
	// Create a timeout context
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()

	msg, err := conn.ReceiveMessage(ctx)
	if err != nil {
		// Handle timeout differently from real error
		if pgconn.Timeout(err) {
			return nil, 0, nil // timeout â†’ return 0 like C version
		}
		return nil, -1, err // fatal error
	}

	switch m := msg.(type) {
	case *pgproto3.CopyData:
		return m.Data, len(m.Data), nil
	case *pgproto3.CopyDone:
		// Server ended the stream
		return nil, -2, nil
	case *pgproto3.ErrorResponse:
		return nil, -1, pgconn.ErrorResponseToPgError(m)
	default:
		// Ignore NoticeResponse, ParameterStatus, etc
		return nil, 0, nil
	}
}

